/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package l_m;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.regex.Pattern;
/**
 *
 * @author Pedro53722376
 */
public class Tela_gerenciar_funcionarios extends javax.swing.JInternalFrame {
    String idPessoa;

    //FUNCAO PARA VERIFICAR SE EMAIL E VALIDO
    public static final String EMAIL_REGEX  = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
    public static boolean emailIsValid(String email){
        return Pattern.matches(EMAIL_REGEX , email);
    };
    
    //FUNCAO PARA GERAR A MATRICULA DO USUARIO
    public static String funcaoMatricula(String matricula){
        float num = Math.round(Math.random() * 1000 * 1000);
        int randomNum = (int)num;
        matricula = String.valueOf(matricula+randomNum);
        return matricula;
    }
    /**
     * Creates new form Tela_gerenciar_funcionarios
     */
    public Tela_gerenciar_funcionarios() {
        initComponents();
        //impede que o usuario mova colunas nas tabelas
        tabelaFunc.getTableHeader().setReorderingAllowed(false);
        //Exibe os itens do BD assim que se inicia a tela 
        try {
            DefaultTableModel modelo = (DefaultTableModel) tabelaFunc.getModel();
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT p.nome, f.matricula FROM pessoas p INNER JOIN funcionario f ON p.id_pessoa = f.id_pessoa;";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
          
            while(rs.next()){
                Object[] dados = {rs.getString("nome"), rs.getString("matricula"), "Funcionário"};
                modelo.addRow(dados);
            }
            
            rs.close();
            con.close();
            stmt.close();
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        refreshBt = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomeTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        senhaTxt = new javax.swing.JTextField();
        senhaLbl = new javax.swing.JLabel();
        cpfTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addBt = new javax.swing.JLabel();
        editBt = new javax.swing.JLabel();
        deleteBt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaFunc = new javax.swing.JTable();
        pesquisaTxt = new javax.swing.JTextField();
        search = new javax.swing.JLabel();

        jLabel5.setText("jLabel5");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        refreshBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/refresh.png"))); // NOI18N
        refreshBt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refreshBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshBtMouseClicked(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Logo.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Malgun Gothic", 0, 24)); // NOI18N
        jLabel2.setText("Funcionários");

        nomeTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        nomeTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        nomeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeTxtActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel7.setText("Nome:");

        senhaTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        senhaTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        senhaTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senhaTxtActionPerformed(evt);
            }
        });

        senhaLbl.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        senhaLbl.setText("Senha:");

        cpfTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        cpfTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        cpfTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpfTxtActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel4.setText("CPF:");

        addBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/addIcon.png"))); // NOI18N
        addBt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addBtMouseClicked(evt);
            }
        });

        editBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/edit.png"))); // NOI18N
        editBt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editBtMouseClicked(evt);
            }
        });

        deleteBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/delete.png"))); // NOI18N
        deleteBt.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteBtMouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Malgun Gothic", 0, 18)); // NOI18N
        jLabel3.setText("Email:");

        emailTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        emailTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        emailTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(136, 136, 136))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomeTxt)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(senhaLbl))
                            .addComponent(senhaTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addComponent(cpfTxt)
                            .addComponent(emailTxt)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(addBt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(editBt)
                .addGap(78, 78, 78)
                .addComponent(deleteBt)
                .addGap(62, 62, 62))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(14, 14, 14)
                .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(senhaLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(senhaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addBt)
                        .addComponent(editBt, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(deleteBt, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        tabelaFunc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabelaFunc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Matrícula", "cargo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaFunc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaFuncMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaFunc);

        pesquisaTxt.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        pesquisaTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        pesquisaTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisaTxtActionPerformed(evt);
            }
        });

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/searchIcon.png"))); // NOI18N
        search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 167, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pesquisaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(search)
                        .addGap(18, 18, 18)
                        .addComponent(refreshBt))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pesquisaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshBt)
                    .addComponent(search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nomeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomeTxtActionPerformed
    
    }//GEN-LAST:event_nomeTxtActionPerformed

    private void senhaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senhaTxtActionPerformed
      
    }//GEN-LAST:event_senhaTxtActionPerformed

    private void cpfTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpfTxtActionPerformed
       
    }//GEN-LAST:event_cpfTxtActionPerformed

    private void pesquisaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisaTxtActionPerformed

    }//GEN-LAST:event_pesquisaTxtActionPerformed

    private void addBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBtMouseClicked
        //INSERT NA TABELA 'PESSOA'
        try{
            //VERIFICA SE USUARIO ESTA CADASTRADO
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT id_pessoa FROM pessoas WHERE email = ? AND cpf = ?";
            PreparedStatement stmt = con.prepareStatement(sql);
            
            stmt.setString(1,emailTxt.getText());
            stmt.setString(2,cpfTxt.getText());
            ResultSet rs = stmt.executeQuery();                 
            
            if(rs.next()){
                JOptionPane.showMessageDialog(null, "Usuario já cadastrado!");
                
                nomeTxt.setText(null);
                emailTxt.setText(null);
                cpfTxt.setText(null);
                senhaTxt.setText(null);
                return;
            }
            
            
            //VERIFICACAO CAMPOS VAZIOS
            if(nomeTxt.getText().isBlank() || emailTxt.getText().isBlank() || cpfTxt.getText().isBlank() || senhaTxt.getText().isBlank()){
                JOptionPane.showMessageDialog(null, "Os campos não podem estar vazios!");
                return;
            }
            
            // VERIFICACAO PARA CONFERIR SE MO EMAIL E VALIDO
            if(!emailIsValid(emailTxt.getText())){
                JOptionPane.showMessageDialog(null, "Email invalido!");
                return;
            }       
        
            //VERIFICA SE O CAMPO CPF TEM ALGO ALEM DE NUMEROS
            char[] cpfArray = cpfTxt.getText().toCharArray();
            for(int i = 0; i < cpfArray.length; i++){
                if(!Character.isDigit(cpfArray[i]) || cpfArray.length != 11){
                    JOptionPane.showMessageDialog(null, "O campo CPF deve conter apenas 11 numeros");
                    return;
                }
            }
            
            //CADASTRANDO O USUARIO
            sql = "INSERT INTO pessoas(nome, email, cpf, senha) VALUES(?,?,?,?)";
            stmt = con.prepareStatement(sql);
            
            stmt.setString(1,nomeTxt.getText());
            stmt.setString(2,emailTxt.getText());
            stmt.setString(3,cpfTxt.getText());
            stmt.setString(4,senhaTxt.getText());
            stmt.execute();
       
            stmt.close();
            con.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Erro na validação de!");
        }   
        //INSERT NA TABELA FUNCIONARIO OU ADMINISTRADOR
        try{
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "INSERT INTO funcionario (matricula, id_pessoa) VALUES('"+funcaoMatricula("FUNC")+"', (SELECT id_pessoa FROM pessoas WHERE email = ? AND senha = ? AND cpf = ?));"; 
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, emailTxt.getText());
            stmt.setString(2, senhaTxt.getText()); 
            stmt.setString(3, cpfTxt.getText());
            stmt.execute();
            
            JOptionPane.showMessageDialog(null,"cadastrado concluido");
                        
            nomeTxt.setText(null);
            emailTxt.setText(null);
            cpfTxt.setText(null);
            senhaTxt.setText(null);
        }catch(SQLException ex){
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addBtMouseClicked
    //botão refresh 
    private void refreshBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtMouseClicked
        
        nomeTxt.setText(null);
        emailTxt.setText(null);
        cpfTxt.setText(null);
        senhaTxt.setText(null);

        // Exibe os itens do BD assim que se inicia a tela 
        try {
            DefaultTableModel modelo = (DefaultTableModel) tabelaFunc.getModel();
            modelo.setNumRows(0);
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT p.nome, f.matricula FROM pessoas p INNER JOIN funcionario f ON p.id_pessoa = f.id_pessoa;";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next()){
                Object[] dados = {rs.getString("nome"), rs.getString("matricula"), "Funcionário"};
                modelo.addRow(dados);
            }
            
            rs.close();
            con.close();
            stmt.close();
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }//GEN-LAST:event_refreshBtMouseClicked

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        DefaultTableModel modelo = (DefaultTableModel) tabelaFunc.getModel();
        if(pesquisaTxt.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Barra de pesquisa está vazi)");
            return;
        }
        try {
            modelo.setNumRows(0);
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT p.nome, f.matricula FROM pessoas p INNER JOIN funcionario f ON p.id_pessoa = f.id_pessoa WHERE nome LIKE ?;";
            PreparedStatement stmt = con.prepareStatement(sql);
            stmt.setString(1, "%"+pesquisaTxt.getText()+"%");
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next()){
                Object[] dados = {rs.getString("nome"), rs.getString("matricula"), "Funcionário"};
                modelo.addRow(dados);
            }
                                   
            rs.close();
            con.close();
            stmt.close();
            
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
        

    }//GEN-LAST:event_searchMouseClicked

    private void emailTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTxtActionPerformed

    private void editBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editBtMouseClicked
        //CONDICAO PARA CAMPOS VAZIOS
        if(nomeTxt.getText().isBlank() || emailTxt.getText().isBlank() || cpfTxt.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Selecione um funcionario na tabela!");
            return;
        }
        //CONDICAO PARA CAMPO SENHA PREENCHIDO     
        if(!senhaTxt.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "O campo senha deve estar vazio");   
            senhaTxt.setText(null);
            return;
        }
        
        try {
             //VERIFICA SE USUARIO ESTA CADASTRADO
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT id_pessoa FROM pessoas WHERE email = ? AND cpf = ?";
            PreparedStatement stmt = con.prepareStatement(sql);
            
            stmt.setString(1,emailTxt.getText());
            stmt.setString(2,cpfTxt.getText());
            ResultSet rs = stmt.executeQuery();                 
            
            if(!rs.next()){
                JOptionPane.showMessageDialog(null, "Usuario não encontrado!");
                
                nomeTxt.setText(null);
                emailTxt.setText(null);
                cpfTxt.setText(null);
                senhaTxt.setText(null);
                return;
            }
            //VERICACAO PARA CAMPOS VAZIOS
            if(nomeTxt.getText().isBlank() || emailTxt.getText().isBlank() || cpfTxt.getText().isBlank() || idPessoa.isBlank()){
                JOptionPane.showMessageDialog(null, "Selecione um usuario na tabela");
                return;
            }
            
            sql = "UPDATE pessoas SET nome = ?, email = ?, cpf = ? WHERE id_pessoa = ?;";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, nomeTxt.getText());           
            stmt.setString(2, emailTxt.getText());
            stmt.setString(3, cpfTxt.getText());
            stmt.setString(4, idPessoa);
            stmt.execute();
            
            JOptionPane.showMessageDialog(null,"Funcionario atualizado com sucesso");
            
            nomeTxt.setText(null);
            emailTxt.setText(null);
            cpfTxt.setText(null);
            senhaTxt.setText(null);
            rs.close();
            con.close();
            stmt.close();
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_editBtMouseClicked

    private void tabelaFuncMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaFuncMouseClicked
        String matriculaFunc = tabelaFunc.getValueAt(tabelaFunc.getSelectedRow(), 1).toString();

        try {
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT p.id_pessoa, p.nome, p.email, p.cpf, f.matricula FROM pessoas p INNER JOIN funcionario f ON p.id_pessoa = f.id_pessoa WHERE matricula = '"+matriculaFunc+"';";
            PreparedStatement stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            if(rs.next()){
                idPessoa = rs.getString("id_pessoa");
                nomeTxt.setText(rs.getString("nome"));
                emailTxt.setText(rs.getString("email"));
                cpfTxt.setText(rs.getString("cpf"));
                return;
            }
                       
            nomeTxt.setText(null);
            emailTxt.setText(null);
            cpfTxt.setText(null);
                      
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_tabelaFuncMouseClicked
    //BOTAO DELETE
    private void deleteBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBtMouseClicked
   
        //VERIFICACAO PARA ESPACOS EM BRANCO
        if(nomeTxt.getText().isBlank() || emailTxt.getText().isBlank() || cpfTxt.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Selecione um funcionario na tabela!");
            return;
        }
        
        try {
            //VERIFICA SE USUARIO ESTA CADASTRADO
            Connection con = DataBaseConnection.conexaoBanco();
            String sql = "SELECT id_pessoa FROM pessoas WHERE email = ? AND cpf = ?";
            PreparedStatement stmt = con.prepareStatement(sql);
            
            stmt.setString(1,emailTxt.getText());
            stmt.setString(2,cpfTxt.getText());
            ResultSet rs = stmt.executeQuery();                 
            
            if(!rs.next()){
                JOptionPane.showMessageDialog(null, "Usuario não encontrado!");
                
                nomeTxt.setText(null);
                emailTxt.setText(null);
                cpfTxt.setText(null);
                senhaTxt.setText(null);
                return;
            }

            sql = "DELETE FROM funcionario WHERE id_pessoa = ?";
            stmt.setString(1, idPessoa);
            stmt = con.prepareStatement(sql);                 
            stmt.execute();
                                          
            sql = "DELETE FROM pessoas WHERE id_pessoa = (SELECT id_pessoa WHERE  email = ? AND cpf = ?);";
            stmt = con.prepareStatement(sql);
            stmt.setString(1, emailTxt.getText());                     
            stmt.setString(2, cpfTxt.getText());
            stmt.execute();
            
            JOptionPane.showMessageDialog(null,"Deletado com sucesso");
            
            nomeTxt.setText(null);
            emailTxt.setText(null);
            cpfTxt.setText(null);
            senhaTxt.setText(null);
            
            con.close();
            stmt.close();
        }catch (SQLException e) {
            Logger.getLogger(Tela_gerenciar_funcionarios.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_deleteBtMouseClicked

   
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addBt;
    private javax.swing.JTextField cpfTxt;
    private javax.swing.JLabel deleteBt;
    private javax.swing.JLabel editBt;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeTxt;
    private javax.swing.JTextField pesquisaTxt;
    private javax.swing.JLabel refreshBt;
    private javax.swing.JLabel search;
    private javax.swing.JLabel senhaLbl;
    private javax.swing.JTextField senhaTxt;
    private javax.swing.JTable tabelaFunc;
    // End of variables declaration//GEN-END:variables
}

